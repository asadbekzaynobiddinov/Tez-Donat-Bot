/* eslint-disable no-undef */
/* eslint-disable no-constant-condition */
import { Payment, User } from '../models/index.js';
import { config } from 'dotenv';
import {
  profileCommmand,
  startCommand,
  shopCommand,
  changeLang,
  startPayment,
  helpCommand,
  manualCommand,
} from '../commands/index.js';

config();

export const paymentConversation = async (conversation, ctx) => {
  try {
    const user = await User.findOne({ where: { telegram_id: ctx.from.id } });

    const message1 = {
      uz: [
        "tepadagi kartaga to'lov qilganingizdan so'ng.\n\n" +
          "‚Äî jo'natgan pulingizni YOZMA ko'rinishda yuboring. " +
          "Nuqta(.) vergul(,) ishlatmasdan jo'nating, " +
          "na'muna: 10000",
        "Iltimos, to'g'ri summa kiriting (faqat raqam, (.) va (,) siz).",
      ],
      en: [
        'After making the payment to the card above.\n\n' +
          '‚Äî Send the amount you transferred in WRITTEN form. ' +
          'Do not use a period (.) or comma (,), ' +
          'example: 10000',
        'Please enter the correct amount (numbers only, without (.) or (,)).',
      ],
      ru: [
        '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É.\n\n' +
          '‚Äî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ü–ò–°–¨–ú–ï–ù–ù–û–ú –≤–∏–¥–µ. ' +
          '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É (.) –∏–ª–∏ –∑–∞–ø—è—Ç—É—é (,), ' +
          '–ø—Ä–∏–º–µ—Ä: 10000',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ (.) –∏–ª–∏ (,)).',
      ],
    };
    const message2 = {
      uz: [
        "Endi esa to'lov skrenshotini jo'nating.\nPDF yoki boshqa format qabul qilinmaydi.",
        'Iltimos, rasm yuboring.',
      ],
      en: [
        'Now, please send the payment screenshot.\nPDF or other formats are not accepted.',
        'Please send a picture.',
      ],
      ru: [
        '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\nPDF –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
      ],
    };

    ctx.session.lastMessage = await ctx.reply(message1[user.language][0]);

    let amount;

    do {
      const { message } = await conversation.wait();
      amount = message.text;

      switch (amount) {
        case '/start':
          startCommand(ctx);
          return;
        case `üõí Do'kon`:
        case 'üõí Shop':
        case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
          shopCommand(ctx);
          return;
        case `üåç Tilni o'zgartirish`:
        case 'üåç Change Language':
        case 'üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫':
          changeLang(ctx);
          return;
        case 'üë§ Kabinet':
        case 'üë§ Profile':
        case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
          profileCommmand(ctx);
          return;
        case `üí∞ Xisob to'ldirish`:
        case 'üí∞ Recharge Account':
        case 'üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞':
          startPayment(ctx);
          return;
        case '/history':
        case 'üåê Buyurtmalar tarixi':
        case 'üåê Order History':
        case 'üåê –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤':
          ordersHistory(ctx);
          return;
        case '/manual':
        case `üìï Qo'llanma`:
        case 'üìï Manual':
        case 'üìï –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ':
          manualCommand(ctx);
          return;
        case '/help':
        case '‚òéÔ∏è Yordam uchun':
        case '‚òéÔ∏è Help':
        case '‚òéÔ∏è –ü–æ–º–æ—â—å':
          helpCommand(ctx);
          return;
      }

      if (
        isNaN(amount) ||
        amount <= 0 ||
        amount.includes('.') ||
        amount.includes(',')
      ) {
        ctx.session.lastMessage = await ctx.reply(message1[user.language][1]);
      } else {
        break;
      }
    } while (true);

    ctx.session.lastMessage = await ctx.reply(message2[user.language][0]);
    let fileId;
    do {
      const { message } = await conversation.wait();

      if (message.photo && message.photo.length > 0) {
        const photo = message.photo;
        const largestPhoto = photo[photo.length - 1];
        fileId = largestPhoto.file_id;
        break;
      } else {
        ctx.session.lastMessage = await ctx.reply(message2[user.language][1]);
      }
    } while (true);

    const payment = {
      user_id: user.id,
      image_id: fileId,
      amount: parseInt(amount),
    };

    const newPayment = await Payment.create(payment);

    const message =
      `Email: ${user.email}\n` +
      `Telefon: ${user.phone_number}\n` +
      `Miqdor: ${newPayment.amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.')}`;

    await ctx.api.sendPhoto(process.env.PAYMENTS_CHANEL, fileId, {
      caption: message,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '‚úÖ Tasdiqlash',
              callback_data: `accept=${newPayment.id}`,
            },
            {
              text: '‚ùå Bekor qilish',
              callback_data: `reject=${newPayment.id}`,
            },
          ],
        ],
      },
    });

    const message3 = {
      uz: `Hisob to'ldirish haqida so'rovingiz qabul qilindi. \nTo'lov tekshirilib balansingizga tez orada pul tushadi!`,
      en: `Your request for balance replenishment has been received. \nThe payment will be verified, and the amount will be credited to your balance shortly!`,
      ru: `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç. \n–ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω, –∏ –¥–µ–Ω—å–≥–∏ —Å–∫–æ—Ä–æ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!`,
    };

    await ctx.reply(message3[user.language]);
    await User.update(
      {
        payment_status: true,
      },
      {
        where: { id: user.id },
      }
    );
    return;
  } catch (error) {
    ctx.api.sendMessage(process.env.ERRORS_CHANEL, error.message);
  }
};
